// src/api.js

// --- 1️⃣ Call the AI backend to classify the complaint ---
export async function classifyCrime(description) {
  const response = await fetch("http://localhost:8000/classify", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ text: description }),
  });

  if (!response.ok) {
    throw new Error("AI classification failed");
  }

  return await response.json();
}

// --- 2️⃣ Submit the final report to Spring Boot backend ---
export async function submitReport(description, userEmail = "anonymous@portal.com") {
  try {
    // Step 1: Ask AI backend to classify the complaint
    const classification = await classifyCrime(description);

    // Step 2: Send the report to Spring Boot
    const reportData = {
      text: classification.complaint,      // Complaint text generated by AI
      crimeType: classification.crime_type, // Crime type predicted by AI
      email: userEmail,                    // Optional user email
    };

    const response = await fetch("http://localhost:8080/api/reports", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(reportData),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error("Server Error:", errorText);
      throw new Error("Failed to submit report");
    }

    const result = await response.json();
    console.log("✅ Report submitted successfully:", result);
    return result;
  } catch (error) {
    console.error("❌ Error submitting report:", error);
    throw error;
  }
}

// --- 3️⃣ Fetch all previous reports ---
export async function fetchReports() {
  const response = await fetch("http://localhost:8080/api/reports");

  if (!response.ok) {
    throw new Error("Failed to fetch reports");
  }

  return await response.json();
}
